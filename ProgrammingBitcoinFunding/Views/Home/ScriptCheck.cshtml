@model ProgrammingBitcoinFunding.Models.ScriptCheckModel
@{
    ViewBag.Title = "Script Debugger";
}

<h2>Script Debugger</h2>
<p>
    This page is for creating your own bitcoin script, and check the result.<br />
</p>
<div class="row">
    <div class="col-md-4">
        <h3>Inputs</h3>
        <form action="/checkscript" method="post" class="form-horizontal">
            <div class="form-group">
                @Html.LabelFor(m => m.ScriptSig, new
   {
       @class = "col-md-3 control-label"
   })
                <div class="col-md-9">
                    @Html.TextAreaFor(o => o.ScriptSig, 3, 200, null)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ScriptPubKey, new
   {
       @class = "col-md-3 control-label"
   })
                <div class="col-md-9">
                    @Html.TextAreaFor(o => o.ScriptPubKey, 5, 200, null)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-3 col-md-10">
                    <input type="submit" value="Run" class="btn btn-default" />
                </div>
            </div>
        </form>
    </div>
</div>
@if(Model.Result != null)
{
    <div class="row">

        <h3>Result</h3>
        <table class="table">
            <colgroup>
                <col class="col-md-2" />
                <col class="col-md-10" />
            </colgroup>
            <tr>
                <th>Validation</th>
                <td>
                    @if(Model.Result.Success)
                    { <span style="color:green">Valid</span>
                    }
                    else
                    {
                        <span style="color:red">Invalid (@Model.Result.Error)</span>
                    }
                </td>
            </tr>
            <tr>
                <th>ScriptSig</th>
                <td style="max-width:100px;word-wrap:break-word;">@Model.ExecutedScriptSig</td>
            </tr>
            <tr>
                <th>ScriptPubKey</th>
                <td>@Model.ExecutedScriptPubKey</td>
            </tr>
        </table>
    </div>

    <div class="row">

        <h3>Stack</h3>
        <table class="table">
            <thead class="thead-inverse">
                <tr>
                    <th>Depth</th>
                    <th>Hex</th>
                    <th>Bool</th>
                    <th>Number (Decimal)</th>
                </tr>
            </thead>
            <tbody>
                @for(int i=0; i < Model.Result.StackValues.Length; i++)
                {
                    <tr>
                        <th class="col-md-2">@(-(i + 1))</th>
                        <td>@Model.Result.StackValues[i].Hex</td>
                        <td>@Model.Result.StackValues[i].Bool</td>
                        <td>@Model.Result.StackValues[i].Number</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="row">
        <h3>CheckSig operations</h3>
        <table class="table">
            <colgroup>
                <col class="col-md-4" />
                <col class="col-md-4" />
                <col class="col-md-4" />
            </colgroup>
            <thead class="thead-inverse">
                <tr>
                    <th>ScriptCode</th>
                    <th>SignedHash</th>
                    <th>Signature</th>
                </tr>
            </thead>
            <tbody>
                @for(int i = 0; i < Model.Result.CheckSigs.Length; i++)
                {
                    <tr>
                        <td>@Model.Result.CheckSigs[i].ScriptCode</td>
                        <td style="max-width:100px;word-wrap:break-word;">@Model.Result.CheckSigs[i].SignedHash</td>
                        <td style="max-width:100px;word-wrap:break-word;">@Model.Result.CheckSigs[i].Signature</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

