@model ProgrammingBitcoinFunding.Models.MASTModel
@{
    ViewBag.Title = "MAST";
}

<h2>MAST</h2>
<p>An example of MAST implementation in 100 lines of code (<a href="https://www.irccloud.com/pastebin/0ZNKfNvC/">https://www.irccloud.com/pastebin/0ZNKfNvC/</a> )<br />
    The idea is to decompose all the possible execution paths of a script, and make merkle tree from that. <br/>
    The wit commitment would need only the executed path and the partial merkle tree to it.</p>
<p>Saving may be negative, but none executed sigops will not be counted for the block, and saving can be done by using Hash160 instead of Hash256 for the merkle tree.</p>
<form action="/mast" method="post">
    @Html.ValidationMessageFor(o => o.Script)<br />
    @Html.TextAreaFor(o => o.Script, 25, 300, null)  <br />
    <input type="submit" value="Submit" />
</form>
@if(Model.DecomposedScripts != null)
{
    <h2>Script decomposition</h2>
    <p>
        <b>MerkleRoot</b>: @Model.MerkleRoot <br />
        <b>Script</b>: @Model.Script<br />
        <b>Size</b>: @Model.FullScriptSize<br />
    </p>
    for(int i = 0; i < Model.DecomposedScripts.Count; i++)
    {
        <h3>Script @i</h3>
        <p>
            <b>String</b>: @Model.DecomposedScripts[i].Script <br />
            <b>Bytes</b>: @Model.DecomposedScripts[i].Bytes <br />
            <b>Hash</b> @Model.DecomposedScripts[i].Hash <br />
            <b>PartialMerkleTree</b>: @Model.DecomposedScripts[i].PartialMerkleTree <br />
            <h4>Size of commitment (Merkle Tree + Script)</h4>
            <b>Size with HASH256</b>:  @Model.DecomposedScripts[i].Size <br />
            <b>Saving with HASH256</b>:  @Model.DecomposedScripts[i].Saving %<br />
            <b>Size with HASH160</b>:  @Model.DecomposedScripts[i].Size160 <br />
            <b>Saving with HASH160</b>:  @Model.DecomposedScripts[i].Saving160 %<br />
        </p>
    }
}